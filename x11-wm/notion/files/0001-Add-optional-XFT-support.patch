From bccd152648a53ec067ea46adfefc17f14871ddd8 Mon Sep 17 00:00:00 2001
From: Campbell Barton <ideasman42@gmail.com>
Date: Fri, 13 Jun 2014 14:53:29 +1000
Subject: [PATCH] Add optional XFT support

---
 de/brush.c              |  22 ++++++++++
 de/brush.h              |  10 +++++
 de/colour.c             |  34 ++++++++++++++++
 de/colour.h             |   8 ++++
 de/draw.c               |  36 ++++++++++-------
 de/font.c               | 105 +++++++++++++++++++++++++++++++++++++++++++++---
 de/font.h               |   6 +++
 de/init.c               |  21 +++++++---
 de/style.c              |  20 ++++++---
 etc/look_greyviolet.lua |   4 +-
 system-autodetect.mk    |  13 ++++++
 11 files changed, 246 insertions(+), 33 deletions(-)

diff --git a/de/brush.c b/de/brush.c
index e1b6882..c09bc6e 100644
--- a/de/brush.c
+++ b/de/brush.c
@@ -48,6 +48,9 @@ bool debrush_init(DEBrush *brush, Window win,
     
     gr_stylespec_init(&brush->current_attr);
     
+#ifdef HAVE_X11_XFT
+    brush->draw=NULL;
+#endif /* HAVE_X11_XFT */
     style->usecount++;
 
     if(!grbrush_init(&(brush->grbrush))){
@@ -128,6 +131,10 @@ void debrush_deinit(DEBrush *brush)
 {
     destyle_unref(brush->d);
     brush->d=NULL;
+#ifdef HAVE_X11_XFT
+    if(brush->draw!=NULL)
+        XftDrawDestroy(brush->draw);
+#endif /* HAVE_X11_XFT */
     gr_stylespec_unalloc(&brush->current_attr);
     grbrush_deinit(&(brush->grbrush));
 }
@@ -139,6 +146,21 @@ void debrush_release(DEBrush *brush)
 }
 
 
+#ifdef HAVE_X11_XFT
+XftDraw *debrush_get_draw(DEBrush *brush, Drawable d)
+{
+    if(brush->draw==NULL)
+        brush->draw=XftDrawCreate(ioncore_g.dpy, d,
+                                  XftDEDefaultVisual(),
+                                  DefaultColormap(ioncore_g.dpy,
+                                  0));
+    else
+        XftDrawChange(brush->draw, d);
+
+    return brush->draw;
+}
+#endif
+
 /*}}}*/
 
 
diff --git a/de/brush.h b/de/brush.h
index 523fcc7..60d4535 100644
--- a/de/brush.h
+++ b/de/brush.h
@@ -15,6 +15,10 @@
 #include <ioncore/gr.h>
 #include <ioncore/rectangle.h>
 
+#ifdef HAVE_X11_XFT
+#include <X11/Xft/Xft.h>
+#endif /* HAVE_X11_XFT */
+
 INTRCLASS(DEBrush);
 
 #include "style.h"
@@ -33,6 +37,9 @@ typedef void DEBrushExtrasFn(DEBrush *brush,
 DECLCLASS(DEBrush){
     GrBrush grbrush;
     DEStyle *d;
+#ifdef HAVE_X11_XFT
+    XftDraw *draw;
+#endif
     DEBrushExtrasFn *extras_fn;
     int indicator_w;
     Window win;
@@ -108,5 +115,8 @@ extern void debrush_enable_transparency(DEBrush *brush, GrTransparency mode);
 extern void debrush_fill_area(DEBrush *brush, const WRectangle *geom);
 extern void debrush_clear_area(DEBrush *brush, const WRectangle *geom);
 
+#ifdef HAVE_X11_XFT
+XftDraw *debrush_get_draw(DEBrush *brush, Drawable d);
+#endif
 
 #endif /* ION_DE_BRUSH_H */
diff --git a/de/colour.c b/de/colour.c
index 5bd2d60..3b10c6e 100644
--- a/de/colour.c
+++ b/de/colour.c
@@ -12,9 +12,21 @@
 
 bool de_alloc_colour(WRootWin *rootwin, DEColour *ret, const char *name)
 {
+#ifndef HAVE_X11_XFT
     XColor c;
     bool ok=FALSE;
+#else /* HAVE_X11_XFT */
+    if(name==NULL)
+        return FALSE;
+    return XftColorAllocName(
+        ioncore_g.dpy,
+        XftDEDefaultVisual(),
+        rootwin->default_cmap,
+        name,
+        ret);
+#endif /* HAVE_X11_XFT */
 
+#ifndef HAVE_X11_XFT
     if(name==NULL)
         return FALSE;
 
@@ -25,11 +37,13 @@ bool de_alloc_colour(WRootWin *rootwin, DEColour *ret, const char *name)
     }
     
     return ok;
+#endif /* ! HAVE_X11_XFT */
 }
 
 
 bool de_duplicate_colour(WRootWin *rootwin, DEColour in, DEColour *out)
 {
+#ifndef HAVE_X11_XFT
     XColor c;
     c.pixel=in;
     XQueryColor(ioncore_g.dpy, rootwin->default_cmap, &c);
@@ -38,11 +52,20 @@ bool de_duplicate_colour(WRootWin *rootwin, DEColour in, DEColour *out)
         return TRUE;
     }
     return FALSE;
+#else /* HAVE_X11_XFT */
+    return XftColorAllocValue(
+        ioncore_g.dpy,
+        XftDEDefaultVisual(),
+        rootwin->default_cmap,
+        &(in.color),
+        out);
+#endif /* HAVE_X11_XFT */
 }
 
 
 void de_free_colour_group(WRootWin *rootwin, DEColourGroup *cg)
 {
+#ifndef HAVE_X11_XFT
     DEColour pixels[5];
     
     pixels[0]=cg->bg;
@@ -54,15 +77,26 @@ void de_free_colour_group(WRootWin *rootwin, DEColourGroup *cg)
     XFreeColors(ioncore_g.dpy, rootwin->default_cmap, pixels, 5, 0);
     
     gr_stylespec_unalloc(&cg->spec);
+#else /* HAVE_X11_XFT */
+    de_free_colour(rootwin, cg->bg);
+    de_free_colour(rootwin, cg->fg);
+    de_free_colour(rootwin, cg->hl);
+    de_free_colour(rootwin, cg->sh);
+    de_free_colour(rootwin, cg->pad);
+#endif /* HAVE_X11_XFT */
 }
 
 
 void de_free_colour(WRootWin *rootwin, DEColour col)
 {
+#ifndef HAVE_X11_XFT
     DEColour pixels[1];
     
     pixels[0]=col;
     
     XFreeColors(ioncore_g.dpy, rootwin->default_cmap, pixels, 1, 0);
+#else /* HAVE_X11_XFT */
+    XftColorFree(ioncore_g.dpy, XftDEDefaultVisual(), rootwin->default_cmap, &col);
+#endif /* HAVE_X11_XFT */
 }
 
diff --git a/de/colour.h b/de/colour.h
index 2c2b166..0477ab8 100644
--- a/de/colour.h
+++ b/de/colour.h
@@ -12,12 +12,19 @@
 #include <ioncore/common.h>
 #include <ioncore/global.h>
 #include <ioncore/rootwin.h>
+#ifdef HAVE_X11_XFT
+#include <X11/Xft/Xft.h>
+#endif /* HAVE_X11_XFT */
 
 
 INTRSTRUCT(DEColourGroup);
 
 
+#ifndef HAVE_X11_XFT
 typedef unsigned long DEColour;
+#else /* HAVE_X11_XFT */
+typedef XftColor DEColour;
+#endif /* HAVE_X11_XFT */
 
 
 DECLSTRUCT(DEColourGroup){
@@ -34,5 +41,6 @@ bool de_alloc_colour(WRootWin *rootwin, DEColour *ret, const char *name);
 bool de_duplicate_colour(WRootWin *rootwin, DEColour in, DEColour *out);
 void de_free_colour_group(WRootWin *rootwin, DEColourGroup *cg);
 void de_free_colour(WRootWin *rootwin, DEColour col);
+#define XftDEDefaultVisual()    DefaultVisual(ioncore_g.dpy, 0)
 
 #endif /* ION_DE_COLOUR_H */
diff --git a/de/draw.c b/de/draw.c
index cd7ac6e..6a85740 100644
--- a/de/draw.c
+++ b/de/draw.c
@@ -20,6 +20,13 @@
 #include <X11/extensions/shape.h>
 
 
+#ifndef HAVE_X11_XFT
+#  define PIXEL(x) x
+#else /* HAVE_X11_XFT */
+#  define PIXEL(x) (x).pixel
+#endif /* HAVE_X11_XFT */
+
+
 /*{{{ Colour group lookup */
 
 
@@ -84,8 +91,7 @@ static void do_draw_border(Window win, GC gc, int x, int y, int w, int h,
     w--;
     h--;
 
-    XSetForeground(ioncore_g.dpy, gc, tlc);
-
+    XSetForeground(ioncore_g.dpy, gc, PIXEL(tlc));
     
     a=(br!=0);
     b=0;
@@ -104,7 +110,7 @@ static void do_draw_border(Window win, GC gc, int x, int y, int w, int h,
     }
 
     
-    XSetForeground(ioncore_g.dpy, gc, brc);
+    XSetForeground(ioncore_g.dpy, gc, PIXEL(brc));
 
     a=(tl!=0);
     b=0;
@@ -141,23 +147,23 @@ static void draw_borderline(Window win, GC gc, WRectangle *geom,
                             GrBorderLine line)
 {
     if(line==GR_BORDERLINE_LEFT && geom->h>0 && tl>0){
-        XSetForeground(ioncore_g.dpy, gc, tlc);
-        XSetBackground(ioncore_g.dpy, gc, tlc);
+        XSetForeground(ioncore_g.dpy, gc, PIXEL(tlc));
+        XSetBackground(ioncore_g.dpy, gc, PIXEL(tlc));
         XFillRectangle(ioncore_g.dpy, win, gc, geom->x, geom->y, tl, geom->h);
         geom->x+=tl;
     }else if(line==GR_BORDERLINE_TOP && geom->w>0 && tl>0){
-        XSetForeground(ioncore_g.dpy, gc, tlc);
-        XSetBackground(ioncore_g.dpy, gc, tlc);
+        XSetForeground(ioncore_g.dpy, gc, PIXEL(tlc));
+        XSetBackground(ioncore_g.dpy, gc, PIXEL(tlc));
         XFillRectangle(ioncore_g.dpy, win, gc, geom->x, geom->y, geom->w, tl);
         geom->y+=tl;
     }else if(line==GR_BORDERLINE_RIGHT && geom->h>0 && br>0){
-        XSetForeground(ioncore_g.dpy, gc, brc);
-        XSetBackground(ioncore_g.dpy, gc, brc);
+        XSetForeground(ioncore_g.dpy, gc, PIXEL(brc));
+        XSetBackground(ioncore_g.dpy, gc, PIXEL(brc));
         XFillRectangle(ioncore_g.dpy, win, gc, geom->x+geom->w-br, geom->y, br, geom->h);
         geom->w-=br;
     }else if(line==GR_BORDERLINE_BOTTOM && geom->w>0 && br>0){
-        XSetForeground(ioncore_g.dpy, gc, brc);
-        XSetBackground(ioncore_g.dpy, gc, brc);
+        XSetForeground(ioncore_g.dpy, gc, PIXEL(brc));
+        XSetBackground(ioncore_g.dpy, gc, PIXEL(brc));
         XFillRectangle(ioncore_g.dpy, win, gc, geom->x, geom->y+geom->h-br, geom->w, br);
         geom->h-=br;
     }
@@ -388,7 +394,7 @@ void debrush_tab_extras(DEBrush *brush, const WRectangle *g,
     }
     
     if(ISSET(a2, GR_ATTR(tagged)) || ISSET(a1, GR_ATTR(tagged))){
-        XSetForeground(ioncore_g.dpy, d->copy_gc, cg->fg);
+        XSetForeground(ioncore_g.dpy, d->copy_gc, PIXEL(cg->fg));
             
         copy_masked(brush, d->tag_pixmap, brush->win, 0, 0,
                     d->tag_pixmap_w, d->tag_pixmap_h,
@@ -437,7 +443,7 @@ void debrush_do_draw_box(DEBrush *brush, const WRectangle *geom,
     GC gc=brush->d->normal_gc;
     
     if(TRUE/*needfill*/){
-        XSetForeground(ioncore_g.dpy, gc, cg->bg);
+        XSetForeground(ioncore_g.dpy, gc, PIXEL(cg->bg));
         XFillRectangle(ioncore_g.dpy, brush->win, gc, geom->x, geom->y, 
                        geom->w, geom->h);
     }
@@ -605,7 +611,7 @@ void debrush_enable_transparency(DEBrush *brush, GrTransparency mode)
         attr.background_pixmap=ParentRelative;
     }else{
         attrflags=CWBackPixel;
-        attr.background_pixel=brush->d->cgrp.bg;
+        attr.background_pixel=PIXEL(brush->d->cgrp.bg);
     }
     
     XChangeWindowAttributes(ioncore_g.dpy, brush->win, attrflags, &attr);
@@ -621,7 +627,7 @@ void debrush_fill_area(DEBrush *brush, const WRectangle *geom)
     if(cg==NULL)
         return;
     
-    XSetForeground(ioncore_g.dpy, gc, cg->bg);
+    XSetForeground(ioncore_g.dpy, gc, PIXEL(cg->bg));
     XFillRectangle(ioncore_g.dpy, brush->win, gc, 
                    geom->x, geom->y, geom->w, geom->h);
 }
diff --git a/de/font.c b/de/font.c
index 3518aa3..14121db 100644
--- a/de/font.c
+++ b/de/font.c
@@ -13,7 +13,9 @@
 #include <ioncore/common.h>
 #include <ioncore/log.h>
 #include "font.h"
+#ifndef HAVE_X11_XFT
 #include "fontset.h"
+#endif /* ! HAVE_X11_XFT */
 #include "brush.h"
 #include "precompose.h"
 
@@ -106,6 +108,9 @@ const char *de_default_fontname()
 
 DEFont *de_load_font(const char *fontname)
 {
+#ifdef HAVE_X11_XFT
+    XftFont *font;
+#endif
     DEFont *fnt;
     XFontSet fontset=NULL;
     XFontStruct *fontstruct=NULL;
@@ -120,7 +125,8 @@ DEFont *de_load_font(const char *fontname)
             return fnt;
         }
     }
-    
+
+#ifndef HAVE_X11_XFT
     if(ioncore_g.use_mb && !(ioncore_g.enc_utf8 && iso10646_font(fontname))){
         LOG(DEBUG, FONT, "Loading fontset %s", fontname); 
         fontset=de_create_font_set(fontname);
@@ -149,13 +155,34 @@ DEFont *de_load_font(const char *fontname)
         return NULL;
     }
     
+#else /* HAVE_X11_XFT */
+#define CF_FALLBACK_FONT_NAME "fixed"
+    if(strncmp(fontname, "xft:", 4)==0){
+        font=XftFontOpenName(ioncore_g.dpy, DefaultScreen(ioncore_g.dpy), fontname+4);
+    }else{
+        font=XftFontOpenXlfd(ioncore_g.dpy, DefaultScreen(ioncore_g.dpy), fontname);
+    }
+    
+    if(font==NULL){
+        if(strcmp(fontname, CF_FALLBACK_FONT_NAME)!=0){
+            warn(TR("Could not load font \"%s\", trying \"%s\""),
+             fontname, CF_FALLBACK_FONT_NAME);
+            return de_load_font(CF_FALLBACK_FONT_NAME);
+        }
+        return NULL;
+    }
+#endif /* HAVE_X11_XFT */
     fnt=ALLOC(DEFont);
     
     if(fnt==NULL)
         return NULL;
     
+#ifndef HAVE_X11_XFT
     fnt->fontset=fontset;
     fnt->fontstruct=fontstruct;
+#else
+    fnt->font=font;
+#endif
     fnt->pattern=scopy(fontname);
     fnt->next=NULL;
     fnt->prev=NULL;
@@ -175,11 +202,13 @@ bool de_set_font_for_style(DEStyle *style, DEFont *font)
     style->font=font;
     font->refcount++;
     
+#ifndef HAVE_X11_XFT
     if(style->font->fontstruct!=NULL){
         XSetFont(ioncore_g.dpy, style->normal_gc, 
                  style->font->fontstruct->fid);
     }
 
+#endif /* ! HAVE_X11_XFT */
     return TRUE;
 }
 
@@ -194,11 +223,13 @@ bool de_load_font_for_style(DEStyle *style, const char *fontname)
     if(style->font==NULL)
         return FALSE;
     
+#ifndef HAVE_X11_XFT
     if(style->font->fontstruct!=NULL){
         XSetFont(ioncore_g.dpy, style->normal_gc, 
                  style->font->fontstruct->fid);
     }
     
+#endif /* ! HAVE_X11_XFT */
     return TRUE;
 }
 
@@ -208,10 +239,15 @@ void de_free_font(DEFont *font)
     if(--font->refcount!=0)
         return;
     
+#ifndef HAVE_X11_XFT
     if(font->fontset!=NULL)
         XFreeFontSet(ioncore_g.dpy, font->fontset);
     if(font->fontstruct!=NULL)
         XFreeFont(ioncore_g.dpy, font->fontstruct);
+#else /* HAVE_X11_XFT */
+    if(font->font!=NULL)
+        XftFontClose(ioncore_g.dpy, font->font);
+#endif /* HAVE_X11_XFT */
     if(font->pattern!=NULL)
         free(font->pattern);
     
@@ -239,6 +275,7 @@ void debrush_get_font_extents(DEBrush *brush, GrFontExtents *fnte)
 
 void defont_get_font_extents(DEFont *font, GrFontExtents *fnte)
 {
+#ifndef HAVE_X11_XFT
     if(font->fontset!=NULL){
         XFontSetExtents *ext=XExtentsOfFontSet(font->fontset);
         if(ext==NULL)
@@ -254,7 +291,14 @@ void defont_get_font_extents(DEFont *font, GrFontExtents *fnte)
         fnte->baseline=fnt->ascent;
         return;
     }
-    
+#else /* HAVE_X11_XFT */
+    if(font->font!=NULL){
+        fnte->max_height=font->font->ascent+font->font->descent;
+        fnte->max_width=font->font->max_advance_width;
+        fnte->baseline=font->font->ascent;
+        return;
+    }
+#endif /* HAVE_X11_XFT */
 fail:
     DE_RESET_FONT_EXTENTS(fnte);
 }
@@ -271,6 +315,7 @@ uint debrush_get_text_width(DEBrush *brush, const char *text, uint len)
 
 uint defont_get_text_width(DEFont *font, const char *text, uint len)
 {
+#ifndef HAVE_X11_XFT
     if(font->fontset!=NULL){
         XRectangle lext;
 #ifdef CF_DE_USE_XUTF8
@@ -298,6 +343,18 @@ uint defont_get_text_width(DEFont *font, const char *text, uint len)
     }else{
         return 0;
     }
+#else /* HAVE_X11_XFT */
+    if(font->font!=NULL){
+        XGlyphInfo extents;
+        if(ioncore_g.enc_utf8)
+            XftTextExtentsUtf8(ioncore_g.dpy, font->font, (XftChar8*)text, len, &extents);
+        else
+            XftTextExtents8(ioncore_g.dpy, font->font, (XftChar8*)text, len, &extents);
+        return extents.xOff;
+    }else{
+        return 0;
+    }
+#endif /* HAVE_X11_XFT */
 }
 
 
@@ -307,17 +364,18 @@ uint defont_get_text_width(DEFont *font, const char *text, uint len)
 /*{{{ String drawing */
 
 
+#ifndef HAVE_X11_XFT
 void debrush_do_draw_string_default(DEBrush *brush, int x, int y,
-                                    const char *str, int len, bool needfill, 
+                                    const char *str, int len, bool needfill,
                                     DEColourGroup *colours)
 {
     GC gc=brush->d->normal_gc;
 
     if(brush->d->font==NULL)
         return;
-    
+
     XSetForeground(ioncore_g.dpy, gc, colours->fg);
-    
+
     if(!needfill){
         if(brush->d->font->fontset!=NULL){
 #ifdef CF_DE_USE_XUTF8
@@ -366,6 +424,43 @@ void debrush_do_draw_string_default(DEBrush *brush, int x, int y,
     }
 }
 
+#else /* HAVE_X11_XFT */
+void debrush_do_draw_string_default(DEBrush *brush,
+                                    int x, int y, const char *str,
+                                    int len, bool needfill,
+                                    DEColourGroup *colours)
+{
+    Window win = brush->win;
+    GC gc=brush->d->normal_gc;
+    XftDraw *draw;
+    XftFont *font;
+
+    if(brush->d->font==NULL)
+        return;
+
+    font=brush->d->font->font;
+    draw=debrush_get_draw(brush, win);
+
+    if(needfill){
+        XGlyphInfo extents;
+        if(ioncore_g.enc_utf8){
+            XftTextExtentsUtf8(ioncore_g.dpy, font, (XftChar8*)str, len,
+                               &extents);
+        }else{
+            XftTextExtents8(ioncore_g.dpy, font, (XftChar8*)str, len, &extents);
+            XftDrawRect(draw, &(colours->bg), x-extents.x, y-extents.y,
+                        extents.width+10, extents.height);
+        }
+    }
+
+    if(ioncore_g.enc_utf8){
+        XftDrawStringUtf8(draw, &(colours->fg), font, x, y, (XftChar8*)str,
+                          len);
+    }else{
+        XftDrawString8(draw, &(colours->fg), font, x, y, (XftChar8*)str, len);
+    }
+}
+#endif /* HAVE_X11_XFT */
 
 void debrush_do_draw_string(DEBrush *brush, int x, int y,
                             const char *str, int len, bool needfill, 
diff --git a/de/font.h b/de/font.h
index 0775fa1..0174d53 100644
--- a/de/font.h
+++ b/de/font.h
@@ -12,6 +12,9 @@
 
 #include <ioncore/common.h>
 #include <ioncore/gr.h>
+#ifdef HAVE_X11_XFT
+#include <X11/Xft/Xft.h>
+#endif /* HAVE_X11_XFT */
 
 INTRSTRUCT(DEFont);
 
@@ -27,6 +30,9 @@ DECLSTRUCT(DEFont){
     int refcount;
     XFontSet fontset;
     XFontStruct *fontstruct;
+#ifdef HAVE_X11_XFT /* HAVE_X11_XFT */
+    XftFont *font;
+#endif /* HAVE_X11_XFT */
     DEFont *next, *prev;
 };
 
diff --git a/de/init.c b/de/init.c
index b607e43..ad47a19 100644
--- a/de/init.c
+++ b/de/init.c
@@ -165,17 +165,26 @@ void de_get_colour_group(WRootWin *rootwin, DEColourGroup *cg,
 {
     bool bgset;
     DEColour padinh;
-    
+    DEColour black, white;
+
+#ifdef HAVE_X11_XFT
+    de_alloc_colour(rootwin, &black, "black");
+    de_alloc_colour(rootwin, &white, "white");
+#else
+    black=DE_BLACK(rootwin);
+    white=DE_WHITE(rootwin);
+#endif
+
     de_get_colour(rootwin, &(cg->hl), tab, "highlight_colour",
-                  (based_on ? based_on->cgrp.hl : DE_WHITE(rootwin)));
+                  (based_on ? based_on->cgrp.hl : white));
     de_get_colour(rootwin, &(cg->sh), tab, "shadow_colour",
-                  (based_on ? based_on->cgrp.sh : DE_WHITE(rootwin)));
+                  (based_on ? based_on->cgrp.sh : white));
     de_get_colour(rootwin, &(cg->fg), tab, "foreground_colour",
-                  (based_on ? based_on->cgrp.fg : DE_WHITE(rootwin)));
+                  (based_on ? based_on->cgrp.fg : white));
     bgset=de_get_colour(rootwin, &(cg->bg), tab, "background_colour",
-                        (based_on ? based_on->cgrp.bg : DE_BLACK(rootwin)));
+                        (based_on ? based_on->cgrp.bg : black));
                         
-    padinh=(based_on ? based_on->cgrp.pad : DE_WHITE(rootwin));
+    padinh=(based_on ? based_on->cgrp.pad : white);
     
     de_get_colour_(rootwin, &(cg->pad), tab, "padding_colour", 
                    (bgset ? cg->bg : padinh), padinh);
diff --git a/de/style.c b/de/style.c
index 63ee24c..864af4e 100644
--- a/de/style.c
+++ b/de/style.c
@@ -70,10 +70,12 @@ void destyle_create_tab_gcs(DEStyle *style)
     /*gcv.function=GXclear;*/
     gcv.stipple=stipple_pixmap;
     gcvmask=GCFillStyle|GCStipple/*|GCFunction*/;
+#ifndef HAVE_X11_XFT
     if(style->font!=NULL && style->font->fontstruct!=NULL){
         gcv.font=style->font->fontstruct->fid;
         gcvmask|=GCFont;
     }
+#endif /* HAVE_X11_XFT */
 
     style->stipple_gc=XCreateGC(dpy, root, gcvmask, &gcv);
     XCopyGC(dpy, style->normal_gc, 
@@ -201,6 +203,14 @@ void destyle_dump(DEStyle *style)
 
 bool destyle_init(DEStyle *style, WRootWin *rootwin, const char *name)
 {
+    DEColour black, white;
+#ifdef HAVE_X11_XFT
+    de_alloc_colour(rootwin, &black, "black");
+    de_alloc_colour(rootwin, &white, "white");
+#else
+    black=DE_BLACK(rootwin);
+    white=DE_WHITE(rootwin);
+#endif /* HAVE_X11_XFT */
     if(!gr_stylespec_load(&style->spec, name))
         return FALSE;
     
@@ -223,11 +233,11 @@ bool destyle_init(DEStyle *style, WRootWin *rootwin, const char *name)
     style->textalign=DEALIGN_CENTER;
 
     style->cgrp_alloced=FALSE;
-    style->cgrp.bg=DE_BLACK(rootwin);
-    style->cgrp.pad=DE_BLACK(rootwin);
-    style->cgrp.fg=DE_WHITE(rootwin);
-    style->cgrp.hl=DE_WHITE(rootwin);
-    style->cgrp.sh=DE_WHITE(rootwin);
+    style->cgrp.bg=black;
+    style->cgrp.pad=black;
+    style->cgrp.fg=white;
+    style->cgrp.hl=white;
+    style->cgrp.sh=white;
     gr_stylespec_init(&style->cgrp.spec);
     
     style->font=NULL;
diff --git a/etc/look_greyviolet.lua b/etc/look_greyviolet.lua
index baf9200..ca30c83 100644
--- a/etc/look_greyviolet.lua
+++ b/etc/look_greyviolet.lua
@@ -13,12 +13,12 @@ de.defstyle("*", {
     highlight_pixels = 1,
     shadow_pixels = 1,
     border_style = "elevated",
-    font = "-*-helvetica-medium-r-normal-*-14-*-*-*-*-*-*-*",
+    font = "xft:Verdana-8:bold",
     text_align = "center",
 })
 
 de.defstyle("tab", {
-    font = "-*-helvetica-medium-r-normal-*-12-*-*-*-*-*-*-*",
+    font = "xft:Verdana-8:bold",
     de.substyle("active-selected", {
         shadow_colour = "#333366",
         highlight_colour = "#aaaacc",
diff --git a/system-autodetect.mk b/system-autodetect.mk
index 3a9b371..aaccf96 100644
--- a/system-autodetect.mk
+++ b/system-autodetect.mk
@@ -100,6 +100,19 @@ DEFINES += -DCF_XFREE86_TEXTPROP_BUG_WORKAROUND
 
 
 ##
+## Xft support
+##
+
+#USE_XFT=1
+
+ifeq ($(USE_XFT),1)
+    X11_INCLUDES += `pkg-config xft --cflags`
+    X11_LIBS += `pkg-config xft --libs`
+    DEFINES += -DHAVE_X11_XFT
+endif
+
+
+##
 ## Localisation
 ##
 
-- 
2.0.0

